//! **utils module**
//!
//! Encapsulates general-purpose helper functions and global constants, including random number generation, fast power calculations, and the definition of global generators.

use std::sync::LazyLock;
use curve25519_dalek::constants::RISTRETTO_BASEPOINT_POINT;
use curve25519_dalek::RistrettoPoint;
use curve25519_dalek::scalar::Scalar;
use rand::rngs::OsRng;
use rand::RngCore;
use crate::hash_adapter::Blake3Adapter;

/// Returns a new instance of the OS random number generator.
pub fn new_rng() -> OsRng {
    OsRng
}

/// Generate a random scalar, using 64-byte entropy and Blake3 hashing to ensure that the scalar is uniformly distributed.
pub fn random_scalar(rng: &mut OsRng) -> Scalar {
    let mut buf = [0u8; 64];
    rng.fill_bytes(&mut buf);
    Scalar::hash_from_bytes::<crate::hash_adapter::Blake3Adapter>(&buf)
}

/// Distributed random number generation: simulate multiple participants to generate random numbers, and finally accumulate them
pub fn distributed_random_scalar(contributions: &[Scalar]) -> Scalar {
    contributions.iter().fold(Scalar::ZERO, |acc, &s| acc + s)
}

/// Fast power algorithm: computes x^exp with time complexity O(log(exp)).
pub fn pow_scalar(x: Scalar, exp: u32) -> Scalar {
    let mut result = Scalar::ONE;
    let mut base = x;
    let mut e = exp;
    while e > 0 {
        if e & 1 == 1 {
            result *= base;
        }
        base = base * base;
        e >>= 1;
    }
    result
}

/// Global constant H, generated by BASEPOINT after Blake3 hashing.
pub static ANOTHER_POINT: LazyLock<RistrettoPoint> = LazyLock::new(|| {
    RistrettoPoint::hash_from_bytes::<Blake3Adapter>(
        RISTRETTO_BASEPOINT_POINT.compress().as_bytes(),
    )
});
